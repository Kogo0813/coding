min = 0, max = 1, value = c(0,1))
),
#Main panel for figures and equations
mainPanel(
#Multiple tabs in main panel
tabsetPanel(
#Tab 1: Time plot (plot1 from server)
tabPanel("Time", plotOutput("plot1")),
#Tab 2: Phase plot (plot2 from server)
tabPanel("Phase plane", plotOutput("plot2",
height = 500)),
#Tab 3: MathJax typeset equations
tabPanel("Equations",
withMathJax(
helpText("Susceptible $$\\frac{dS}{dt} =
\\mu (N - S) - \\frac{\\beta I S}{N}$$"),
helpText("Infecitous $$\\frac{dI}{dt} =
\\frac{\\beta I S}{N} - (\\mu+\\sigma) I$$"),
helpText("Removed $$\\frac{dR}{dt} =
\\gamma I - \\mu R$$"),
helpText("Reproductive ratio $$R_0 =
\\frac{1}{\\gamma+\\mu} \\frac{\\beta N}{N}$$")
))
ui = pageWithSidebar(
ui = pageWithSidebar(
#The title
headerPanel("The SIR model"),
#The sidebar for parameter input
sidebarPanel(
#Sliders:
sliderInput("beta", "Transmission (yrˆ-1):", 300,
min = 0, max = 1000),
sliderInput("infper", "Infectious period (days)", 5,
min = 1, max = 100),
sliderInput("mu", "birth rate:", 5,
min = 0, max = 100),
sliderInput("T", "Time range:",
min = 0, max = 1, value = c(0,1))
),
#Main panel for figures and equations
mainPanel(
#Multiple tabs in main panel
tabsetPanel(
#Tab 1: Time plot (plot1 from server)
tabPanel("Time", plotOutput("plot1")),
#Tab 2: Phase plot (plot2 from server)
tabPanel("Phase plane", plotOutput("plot2",
height = 500)),
#Tab 3: MathJax typeset equations
tabPanel("Equations",
withMathJax(
helpText("Susceptible $$\\frac{dS}{dt} =
\\mu (N - S) - \\frac{\\beta I S}{N}$$"),
helpText("Infecitous $$\\frac{dI}{dt} =
\\frac{\\beta I S}{N} - (\\mu+\\sigma) I$$"),
helpText("Removed $$\\frac{dR}{dt} =
\\gamma I - \\mu R$$"),
helpText("Reproductive ratio $$R_0 =
\\frac{1}{\\gamma+\\mu} \\frac{\\beta N}{N}$$")
))
ui = pageWithSidebar(
ui = pageWithSidebar(
#The title
headerPanel("The SIR model"),
#The sidebar for parameter input
sidebarPanel(
#Sliders:
sliderInput("beta", "Transmission (yrˆ-1):", 300,
min = 0, max = 1000),
sliderInput("infper", "Infectious period (days)", 5,
min = 1, max = 100),
sliderInput("mu", "birth rate:", 5,
min = 0, max = 100),
sliderInput("T", "Time range:",
min = 0, max = 1, value = c(0,1))
),
#Main panel for figures and equations
mainPanel(
#Multiple tabs in main panel
tabsetPanel(
#Tab 1: Time plot (plot1 from server)
tabPanel("Time", plotOutput("plot1")),
#Tab 2: Phase plot (plot2 from server)
tabPanel("Phase plane", plotOutput("plot2",
height = 500)),
#Tab 3: MathJax typeset equations
tabPanel("Equations",
withMathJax(
helpText("Susceptible $$\\frac{dS}{dt} =
\\mu (N - S) - \\frac{\\beta I S}{N}$$"),
helpText("Infecitous $$\\frac{dI}{dt} =
\\frac{\\beta I S}{N} - (\\mu+\\sigma) I$$"),
helpText("Removed $$\\frac{dR}{dt} =
\\gamma I - \\mu R$$"),
helpText("Reproductive ratio $$R_0 =
\\frac{1}{\\gamma+\\mu} \\frac{\\beta N}{N}$$")
))
ui = pageWithSidebar(
ui = pageWithSidebar(
#The title
headerPanel("The SIR model"),
#The sidebar for parameter input
sidebarPanel(
#Sliders:
sliderInput("beta", "Transmission (yrˆ-1):", 300,
min = 0, max = 1000),
sliderInput("infper", "Infectious period (days)", 5,
min = 1, max = 100),
sliderInput("mu", "birth rate:", 5,
min = 0, max = 100),
sliderInput("T", "Time range:",
min = 0, max = 1, value = c(0,1))
),
#Main panel for figures and equations
mainPanel(
#Multiple tabs in main panel
tabsetPanel(
#Tab 1: Time plot (plot1 from server)
tabPanel("Time", plotOutput("plot1")),
#Tab 2: Phase plot (plot2 from server)
tabPanel("Phase plane", plotOutput("plot2",
height = 500)),
#Tab 3: MathJax typeset equations
tabPanel("Equations",
withMathJax(
helpText("Susceptible $$\\frac{dS}{dt} =
\\mu (N - S) - \\frac{\\beta I S}{N}$$"),
helpText("Infecitous $$\\frac{dI}{dt} =
\\frac{\\beta I S}{N} - (\\mu+\\sigma) I$$"),
helpText("Removed $$\\frac{dR}{dt} =
\\gamma I - \\mu R$$"),
helpText("Reproductive ratio $$R_0 =
\\frac{1}{\\gamma+\\mu} \\frac{\\beta N}{N}$$")
))
ui = pageWithSidebar(
ui = pageWithSidebar(
#The title
headerPanel("The SIR model"),
#The sidebar for parameter input
sidebarPanel(
#Sliders:
sliderInput("beta", "Transmission (yrˆ-1):", 300,
min = 0, max = 1000),
sliderInput("infper", "Infectious period (days)", 5,
min = 1, max = 100),
sliderInput("mu", "birth rate:", 5,
min = 0, max = 100),
sliderInput("T", "Time range:",
min = 0, max = 1, value = c(0,1))
),
#Main panel for figures and equations
mainPanel(
#Multiple tabs in main panel
tabsetPanel(
#Tab 1: Time plot (plot1 from server)
tabPanel("Time", plotOutput("plot1")),
#Tab 2: Phase plot (plot2 from server)
tabPanel("Phase plane", plotOutput("plot2",
height = 500)),
#Tab 3: MathJax typeset equations
tabPanel("Equations",
withMathJax(
helpText("Susceptible $$\\frac{dS}{dt} =
\\mu (N - S) - \\frac{\\beta I S}{N}$$"),
helpText("Infecitous $$\\frac{dI}{dt} =
\\frac{\\beta I S}{N} - (\\mu+\\sigma) I$$"),
helpText("Removed $$\\frac{dR}{dt} =
\\gamma I - \\mu R$$"),
helpText("Reproductive ratio $$R_0 =
\\frac{1}{\\gamma+\\mu} \\frac{\\beta N}{N}$$")
))
ui = pageWithSidebar(
ui = pageWithSidebar(
#The title
headerPanel("The SIR model"),
#The sidebar for parameter input
sidebarPanel(
#Sliders:
sliderInput("beta", "Transmission (yrˆ-1):", 300,
min = 0, max = 1000),
sliderInput("infper", "Infectious period (days)", 5,
min = 1, max = 100),
sliderInput("mu", "birth rate:", 5,
min = 0, max = 100),
sliderInput("T", "Time range:",
min = 0, max = 1, value = c(0,1))
),
#Main panel for figures and equations
mainPanel(
#Multiple tabs in main panel
tabsetPanel(
#Tab 1: Time plot (plot1 from server)
tabPanel("Time", plotOutput("plot1")),
#Tab 2: Phase plot (plot2 from server)
tabPanel("Phase plane", plotOutput("plot2",
height = 500)),
#Tab 3: MathJax typeset equations
tabPanel("Equations",
withMathJax(
helpText("Susceptible $$\\frac{dS}{dt} =
\\mu (N - S) - \\frac{\\beta I S}{N}$$"),
helpText("Infecitous $$\\frac{dI}{dt} =
\\frac{\\beta I S}{N} - (\\mu+\\sigma) I$$"),
helpText("Removed $$\\frac{dR}{dt} =
\\gamma I - \\mu R$$"),
helpText("Reproductive ratio $$R_0 =
\\frac{1}{\\gamma+\\mu} \\frac{\\beta N}{N}$$")
)),
)))
#End of server()
shinyApp(ui, server)
# This creates the ’behind the scenes’ code (Server)
server = function(input, output) { #Gradient function for SIR model
sirmod=function(t, x, parms){ S=x[1]
I=x[2]
R=x[3]
beta=parms["beta"]
mu=parms["mu"]
gamma=parms["gamma"]
N=parms["N"]
dS = mu * (N - S) - beta * S * I / N
dI = beta * S * I / N - (mu + gamma) * I
dR = gamma * I - mu * R
res=c(dS, dI, dR)
list(res)
}
#Gradient function used for phaseR phase-plot
simod=function(t, y, parameters){ S=y[1]
I=y[2]
beta=parameters["beta"]
mu=parameters["mu"]
gamma=parameters["gamma"]
N=parameters["N"]
dS = mu * (N - S) - beta * S * I / N
dI = beta * S * I / N - (mu + gamma) * I
res=c(dS, dI)
list(res)
}
#Plot1: renderPlot to be passed to UI tab 1
output$plot1 = renderPlot({ #input\$xx’s are pulled from UI
times = seq(0, input$T[2], by=1/1000)
parms = c(mu = input$mu, N = 1, beta = input$beta,
gamma = 365/input$infper)
start = c(S=0.999, I=0.001, R = 0)
R0 = round(with(as.list(parms), beta/(gamma+mu)), 1)
#Integrate ode with parameters pulled from UI
out=ode(y=start, times=times, func=sirmod,
parms=parms)
out=as.data.frame(out)
#Plot1
sel=out$time>input$T[1]&out$time<input$T[2]
plot(x=out$time[sel], y=out$S[sel], ylab="fraction",
xlab="time", type="l", ylim=range(out[sel,-c(1,4)]))
title(paste("R0=", R0))
lines(x=out$time[sel], y=out$I[sel], col="red")
lines(x=out$time[sel], y=out$R[sel], col="green")
legend("right", legend=c("S", "I", "R"),
lty=c(1,1,1), col=c("black", "red", "green"))
})
#Plot2: renderPlot to be passed to UI tab 2
output$plot2 = renderPlot({ times = seq(0, input$T[2], by=1/1000)
parms = c(mu = input$mu, N = 1, beta = input$beta,
gamma = 365/input$infper)
start = c(S=0.999, I=0.001, R = 0)
R0 = round(with(as.list(parms), beta/(gamma+mu)), 1)
#Integrate simod
out=ode(y=start[-3], times=times, func=simod,
parms=parms)
out=as.data.frame(out)
#Plot2
plot(x=out$S, y=out$I, xlab="Fraction suceptible",
ylab="Fraction infected", type="l")
title(paste("R0=", R0))
#Add vector field
fld=flowField(simod, xlim=range(out$S), ylim=
range(out$I), parameters=parms, system="two.dim",
add=TRUE, ylab="I", xlab="S")
#Add isoclines
abline(v=1/R0, col="green")
curve(parms["mu"]*(1-x)/(parms["beta"]*x), min(out$S),
max(out$S), add=TRUE, col="red")
legend("topright", legend=c("I-socline",
"S-isocline"), lty=c(1,1), col=c("red", "green"))
})
}
#End of server()
shinyApp(ui, server)
require(deSolve)
sirmod <- function(time, y, parms) {
# y 벡터 안에 S, I, R의 값을 저장
S = y[1]
I = y[2]
R = y[3]
# beta, gamma, mu의 값을 parms에 저장
beta = parms["beta"]
mu = parms["mu"]
gamma = parms["gamma"]
N = parms["N"]
# 방정식을 정의
dS = mu*(N - S) - beta * S * I/N
dI = beta * S * I/N - (mu + gamma) * I
dR= gamma * I - mu * R
res = c(dS, dI, dR)
list(res)
}
# ode function에 들어갈 파라미터 정의
times = seq(0, 26, by = 1/10)
parms = c(mu = 0, N = 1, beta = 2, gamma = 1/2)
start = c(S = 0.999, I = 0.001, R = 0)
# ode Function
out = ode(y = start, times = times, func = sirmod, parms = parms)
out = as.data.frame(out)
head(round(out, 3))
# 시각화
plot(x = out$time, y = out$S, ylab = "Fraction", xlab = "Time",
type = 'l')
lines(x = out$time, y = out$I, col = "red")
lines(x = out$time, y = out$R, col = "blue")
# R0 계산
R0 = (parms["beta"] / (parms["gamma"] + parms["mu"]))
R0
par(mar = c(5, 5, 2, 5))
plot(x = out$time, y = out$S, ylab = "Fraction", xlab = "Time",
type = 'l')
lines(x = out$time, y = out$I, col = "red")
lines(x = out$time, y = out$R, col = "blue")
legend('right', legend = c("S", "I", "R"), col = c("black", "red", "blue"), lty = 1, cex = 0.8)
# 감염자 수가 최대인 지점
xx = out$time[which.max(out$I)]
lines(c(xx, xx), c(1 / R0, max(out$I)), lty = 3, color = 'green')
# 평형 상태, rootSolve패키지의 runsteady() 함수
install.packages('rootSolve')
require(rootSolve)
equil = runsteady(y = c(S = 1-1E-5, I = 1E-5, R = 0),
times = c(0, 1E5), func = sirmod, parms = parms)
round(equil$y, 3)
# 이 파라미터에 대한 전염병 기간 중 2%만 감염되지 않고 98%는 감염된다는 것을 의미한다.
R0 = seq(0.1, 5, length = 50)
betas = R0 * 0.5 # 기초감염재생산지수가 증가할수록 beta도 증가하도록 설정
f = rep(NA, 50)
for (i in seq(from = 1, to = 50, by = 1)) {
equil = runsteady(y = c(S = 1-1E-5, I = 1E-5, R = 0),
times = c(0, 1E5), func = sirmod, parms = c(mu = 0, N = 1, beta = betas[i], gamma = 1/2))
f[i] = equil$y["R"]
}
plot(R0, f, type = 'l', xlab = expression(R[0]))
curve(1- exp(-x), from = 1, to = 5, add = TRUE, col = 'red')
# Define Function
fn = function(x, R0) {
exp(-(R0 * (1-x))) - x
}
1 - uniroot(fn, lower = 0, upper = 1-1E-9,
tol = 1e-9, R0 = 2)$root
# 근사의 정확성 체크
exp(-2) - uniroot(fn, lower = 0, upper = 1-1E-9,
tol = 1e-9, R0 = 2)$root
# 2.4 Open Epidemic (S의 유입이 존재하는 경우)
times = seq(0, 52*50, by = .1)
parms = c(mu = 1/(50*52), N = 1, beta = 2, gamma = 1/2)
start = c(S = 0.19, I = 0.01, R = 0.8)
out = as.data.frame(ode(y = start, times = times, func = sirmod, parms = parms))
par(mfrow = c(1,2))
plot(times, out$I, ylab = "Fraction", xlab = "Time", type = 'l')
plot(out$S, out$I, type = 'l', xlab = 'S', ylab = 'I')
# 2.5 Phase Analyses
simod = function(t, y, parameters) {
S = y[1]
I = y[2]
beta = parameters["beta"]
mu = parameters["mu"]
gamma = parameters["gamma"]
N = parameters["N"]
dS = mu * (N-S) - beta * S * I
dI = beta * S * I - (mu + gamma) * I
res = c(dS, dI)
list(res)
}
install.packages("phaseR")
library(phaseR)
# 벡터공간 시각화
fld <- flowField(simod, xlim = c(0.15, 0.35), ylim = c(0, .01),
parameters = parms, system = "two.dim", ylab = 'I', xlab = 'S',
add = FALSE)
par(mfrow = c(1,1))
out = as.data.frame(ode(y = c(S = 0.19, I = 0.01), times =
seq(0, 52*100, by = .1), func = simod, parms = parms))
lines(out$S, out$I, col = 'red')
curve(parms["mu"]*(1/x-1)/parms['beta'], 0.15, 0.35,
xlab = 'S', ylab = 'I', add = TRUE)
shat = (parms['gamma'] + parms['mu']) / parms['beta']
lines(rep(shat, 2), c(0, 0.01))
legend('topright', legend = c('Transient' ,'Isoclines'),
lty = c(1, 1), col = c('red', 'black'))
# ShinyApp
library(shiny)
ui = pageWithSidebar(
#The title
headerPanel("The SIR model"),
#The sidebar for parameter input
sidebarPanel(
#Sliders:
sliderInput("beta", "Transmission (yrˆ-1):", 300,
min = 0, max = 1000),
sliderInput("infper", "Infectious period (days)", 5,
min = 1, max = 100),
sliderInput("mu", "birth rate:", 5,
min = 0, max = 100),
sliderInput("T", "Time range:",
min = 0, max = 1, value = c(0,1))
),
#Main panel for figures and equations
mainPanel(
#Multiple tabs in main panel
tabsetPanel(
#Tab 1: Time plot (plot1 from server)
tabPanel("Time", plotOutput("plot1")),
#Tab 2: Phase plot (plot2 from server)
tabPanel("Phase plane", plotOutput("plot2",
height = 500)),
#Tab 3: MathJax typeset equations
tabPanel("Equations",
withMathJax(
helpText("Susceptible $$\\frac{dS}{dt} =
\\mu (N - S) - \\frac{\\beta I S}{N}$$"),
helpText("Infecitous $$\\frac{dI}{dt} =
\\frac{\\beta I S}{N} - (\\mu+\\sigma) I$$"),
helpText("Removed $$\\frac{dR}{dt} =
\\gamma I - \\mu R$$"),
helpText("Reproductive ratio $$R_0 =
\\frac{1}{\\gamma+\\mu} \\frac{\\beta N}{N}$$")
)),
)))
# This creates the ’behind the scenes’ code (Server)
server = function(input, output) { #Gradient function for SIR model
sirmod=function(t, x, parms){ S=x[1]
I=x[2]
R=x[3]
beta=parms["beta"]
mu=parms["mu"]
gamma=parms["gamma"]
N=parms["N"]
dS = mu * (N - S) - beta * S * I / N
dI = beta * S * I / N - (mu + gamma) * I
dR = gamma * I - mu * R
res=c(dS, dI, dR)
list(res)
}
#Gradient function used for phaseR phase-plot
simod=function(t, y, parameters){ S=y[1]
I=y[2]
beta=parameters["beta"]
mu=parameters["mu"]
gamma=parameters["gamma"]
N=parameters["N"]
dS = mu * (N - S) - beta * S * I / N
dI = beta * S * I / N - (mu + gamma) * I
res=c(dS, dI)
list(res)
}
#Plot1: renderPlot to be passed to UI tab 1
output$plot1 = renderPlot({ #input\$xx’s are pulled from UI
times = seq(0, input$T[2], by=1/1000)
parms = c(mu = input$mu, N = 1, beta = input$beta,
gamma = 365/input$infper)
start = c(S=0.999, I=0.001, R = 0)
R0 = round(with(as.list(parms), beta/(gamma+mu)), 1)
#Integrate ode with parameters pulled from UI
out=ode(y=start, times=times, func=sirmod,
parms=parms)
out=as.data.frame(out)
#Plot1
sel=out$time>input$T[1]&out$time<input$T[2]
plot(x=out$time[sel], y=out$S[sel], ylab="fraction",
xlab="time", type="l", ylim=range(out[sel,-c(1,4)]))
title(paste("R0=", R0))
lines(x=out$time[sel], y=out$I[sel], col="red")
lines(x=out$time[sel], y=out$R[sel], col="green")
legend("right", legend=c("S", "I", "R"),
lty=c(1,1,1), col=c("black", "red", "green"))
})
#Plot2: renderPlot to be passed to UI tab 2
output$plot2 = renderPlot({ times = seq(0, input$T[2], by=1/1000)
parms = c(mu = input$mu, N = 1, beta = input$beta,
gamma = 365/input$infper)
start = c(S=0.999, I=0.001, R = 0)
R0 = round(with(as.list(parms), beta/(gamma+mu)), 1)
#Integrate simod
out=ode(y=start[-3], times=times, func=simod,
parms=parms)
out=as.data.frame(out)
#Plot2
plot(x=out$S, y=out$I, xlab="Fraction suceptible",
ylab="Fraction infected", type="l")
title(paste("R0=", R0))
#Add vector field
fld=flowField(simod, xlim=range(out$S), ylim=
range(out$I), parameters=parms, system="two.dim",
add=TRUE, ylab="I", xlab="S")
#Add isoclines
abline(v=1/R0, col="green")
curve(parms["mu"]*(1-x)/(parms["beta"]*x), min(out$S),
max(out$S), add=TRUE, col="red")
legend("topright", legend=c("I-socline",
"S-isocline"), lty=c(1,1), col=c("red", "green"))
})
}
#End of server()
shinyApp(ui, server)
install.packages("C:/Program Files/R/R-4.2.2/library/epimdr_0.6-5.tar.gz")
library(epimdr)
data(black)
black
